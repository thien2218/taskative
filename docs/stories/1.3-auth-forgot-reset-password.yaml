status: "Done"
priority: null
story:
  role: "unauthenticated user"
  action: "to request a password reset via an emailed token and set a new password"
  benefit: "I can securely regain access to my account when I forget my password."
acceptance-criteria:
  - "Implement `POST /v1/auth/forgot-password` that accepts `{ email }` and, when a user exists, generates a one-time reset token and logs/sends it (email sending may be stubbed/logged for MVP). Do not leak whether the email exists. [Source: epics/1-authentication.md#Scope] [Source: docs/api/auth-endpoints.md]"
  - "Implement `POST /v1/auth/reset-password` that accepts `{ token, newPassword }`, validates the token, hashes the new password with bcrypt, and updates the user’s password. [Source: epics/1-authentication.md#API-(/v1)] [Source: docs/backend-architecture.md#1.3-high-level-components-mvp]"
  - "After a successful password reset, revoke all active sessions for the user and clear any session cookie on the client (logout everywhere). [Source: epics/1-authentication.md#Acceptance-Criteria] [Source: docs/backend-architecture.md#sessions] [Source: docs/backend-architecture.md#1.6-authentication-flow]"
  - "Apply minimal rate limiting and input validation to both endpoints; error responses must not disclose whether an email exists or a token is valid (generic messages). [Source: epics/1-authentication.md#Acceptance-Criteria]"
  - "Unit/integration tests cover happy paths and key error cases for both endpoints, including token reuse/expiry, invalid token, weak/short password, and “do not leak existence of email”. [Source: epics/1-authentication.md#Definition-of-Done]"
tasks-subtasks: |
  -  [x] Endpoints (AC: 1, 2) [Diff: 6]
     -  [x] Add Hono routes under `/v1/auth/forgot-password` and `/v1/auth/reset-password` in the API Worker. [Source: docs/api/auth-endpoints.md] [Source: docs/backend-architecture.md#1.2-folder-structure] [Diff: 3]
     -  [x] Validate inputs with Zod (email format; password min length ≥ 8). [Source: docs/api/auth-endpoints.md#Security-Features] [Diff: 3]
  -  [x] Token generation and handling (AC: 1, 2) [Diff: 6]
     -  [x] Generate secure, single-use reset tokens with reasonable expiry (e.g., 30–60 minutes). [Source: epics/1-authentication.md#Scope] [Diff: 3]
     -  [x] Storage mechanism for reset tokens is not specified in architecture docs; select an approach (e.g., D1 table or temporary KV) and document it in the PR. [No specific guidance found in architecture docs] [Diff: 3]
     -  [x] Ensure token verification is constant-time and tokens cannot be reused after successful reset. [Source: epics/1-authentication.md#Acceptance-Criteria] [Diff: 3]
  -  [x] Password reset logic (AC: 2) [Diff: 6]
     -  [x] Hash new password using bcrypt in the Auth Service Worker. [Source: docs/backend-architecture.md#1.3-high-level-components-mvp] [Diff: 3]
     -  [x] Update user record in D1 via Kysely with CamelCase types. [Source: docs/backend-architecture.md#1.1-purpose] [Diff: 3]
  -  [x] Session invalidation (AC: 3) [Diff: 6]
     -  [x] Revoke all active sessions for the user (delete relevant rows from `sessions` and clear related KV cache keys `session:{session_id}`). [Source: docs/backend-architecture.md#sessions] [Source: docs/backend-architecture.md#Key-Naming] [Diff: 3]
     -  [x] Clear the session cookie on the response if present. [Source: docs/backend-architecture.md#1.6-authentication-flow] [Diff: 3]
  -  [x] Security, validation, and rate limiting (AC: 4) [Diff: 6]
     -  [x] Enforce generic error messages that do not reveal account existence or token validity. [Source: epics/1-authentication.md#Acceptance-Criteria] [Diff: 3]
     -  [x] Apply basic per-IP rate limiting for forgot/reset endpoints. [Source: epics/1-authentication.md#Acceptance-Criteria] [Diff: 3]
  -  [x] Tests (AC: 5) [Diff: 6]
     -  [x] Forgot password: returns success response regardless of email existence; logs/stubs token; rate limit behavior verified. [Source: epics/1-authentication.md#Acceptance-Criteria] [Diff: 3]
     -  [x] Reset password: success with valid token updates password (bcrypt) and revokes all sessions; invalid/expired/reused token paths rejected; weak password rejected. [Source: epics/1-authentication.md#Definition-of-Done] [Diff: 3]
dev-notes: |
  ### Previous Story Insights
  
  -  Story 1.2 migrated authentication to a session-backed JWT cookie with middleware renewal; this story must revoke server-side sessions after a successful password reset to log the user out everywhere. [Source: stories/1.2-auth-session-jwt-cookie-migration.md] [Source: docs/backend-architecture.md#1.6-authentication-flow]
  
  ### Data Models
  
  -  `users` table: includes `id`, `email`, `password_hash`, timestamps. [Source: docs/backend-architecture.md#users]
  -  `sessions` table: server-side session state, rows should be revoked/removed on password reset. [Source: docs/backend-architecture.md#sessions]
  -  Password reset token storage: No specific guidance found in architecture docs (implementation detail to be decided; follow Prisma-first approach if adding a table). [Source: docs/backend-architecture.md#IMPORTANT-—-Prisma-Enforcement]
  
  ### API Specifications
  
  -  Endpoints to implement:
     -  `POST /v1/auth/forgot-password` — initiate reset; token generation and delivery may be stubbed/logged. [Source: epics/1-authentication.md#API-(/v1)] [Source: docs/api/auth-endpoints.md]
     -  `POST /v1/auth/reset-password` — complete reset with token + new password. [Source: epics/1-authentication.md#API-(/v1)] [Source: docs/api/auth-endpoints.md]
  
  ### Runtime Components
  
  -  API Edge Layer (Cloudflare Workers + Hono) hosts routes and validation. [Source: docs/backend-architecture.md#1.3-high-level-components-mvp]
  -  Auth Service handles bcrypt hashing. [Source: docs/backend-architecture.md#1.3-high-level-components-mvp]
  -  KV cache is used as cache for sessions; D1 is source of truth. [Source: docs/backend-architecture.md]
  
  ### File Locations
  
  -  Routes under `backend/src/routes/` (`/v1/auth/*`). [Source: docs/backend-architecture.md#1.2-folder-structure]
  -  Services under `backend/src/services/` (Auth service logic). [Source: docs/backend-architecture.md#1.2-folder-structure]
  -  DB access under `backend/src/db/`. [Source: docs/backend-architecture.md#1.2-folder-structure]
  -  Validators under `backend/src/validators/` for request validation. [Source: docs/backend-architecture.md#1.2-folder-structure]
  
  ### Testing Requirements
  
  -  Follow epic DoD and apply existing Auth testing approach to new endpoints (bcrypt validation, no plaintext logging, generic errors). [Source: epics/1-authentication.md#Definition-of-Done] [Source: docs/api/auth-endpoints.md#Testing]
  
  ### Technical Constraints and Notes
  
  -  Prisma-first schema management; do not edit SQL directly. If a `password_reset_tokens` table is introduced, implement via Prisma migration and regenerate Kysely types. [Source: docs/backend-architecture.md#IMPORTANT-—-Prisma-Enforcement] [Source: docs/backend-architecture.md#Database-Commands]
  -  Session cookie is short-lived (20m) and renewed by middleware; ensure resets revoke server-side sessions so old cookies become invalid in practice. [Source: docs/backend-architecture.md#1.6-authentication-flow]
  
  ### Project Structure Notes
  
  -  Story files for v1 are located under `docs/v1/stories/` (this story follows that convention).
testing-standards:
  - "Follow epic DoD and apply existing Auth testing approach to new endpoints (bcrypt validation, no plaintext logging, generic errors). [Source: epics/1-authentication.md#Definition-of-Done] [Source: docs/api/auth-endpoints.md#Testing]"
change-log:
  - date: "2025-08-14"
    version: "0.1"
    description: "Draft: forgot/reset password flows"
    author: "Bob (SM)"
developer-record:
  agent-model: "Claude 3.7 Sonnet"
  debug-log-references: []
  completion-notes:
    - "Created a new Prisma migration to add `password_reset_tokens` table for secure storage of one-time reset tokens"
    - "Implemented forgot-password endpoint that securely logs tokens for development (would email in production)"
    - "Implemented reset-password endpoint with proper validation and session revocation"
    - "Added revokeAllUserSessions method to SessionService to enforce security on password reset"
    - "All error messages are generic to prevent account enumeration"
    - "Created comprehensive test suite for both endpoints and service methods"
  file-list:
    - "backend/src/**tests**/routes/auth.spec.ts"
    - "backend/src/**tests**/services/auth.spec.ts"
    - "backend/src/**tests**/services/session.spec.ts"
    - "backend/src/**tests**/mocks/auth.ts"
    - "backend/src/**tests**/mocks/env.ts"
    - "backend/src/db/schema.prisma (added PasswordResetToken model)"
    - "backend/src/db/types.ts (generated types updated via migration)"
    - "backend/src/types/auth.ts (added PasswordResetResult and PasswordResetError types)"
    - "backend/src/validators/auth.ts (added forgotPasswordSchema and resetPasswordSchema)"
    - "backend/src/services/auth.ts (added forgotPassword and resetPassword methods)"
    - "backend/src/services/session.ts (added revokeAllUserSessions method)"
    - "backend/src/routes/auth.ts (added forgot-password and reset-password endpoints)"
qa-results: |
  Gate: PASS
  Reviewer: Quinn (Test Architect)
  Summary: Forgot/reset flows meet AC with strong route, service, and middleware coverage. Generic errors enforced; sessions revoked on reset; cookie cleared.
  Evidence:
    - AC mapping:
      - AC1 (forgot-password): validated inputs; returns 200 regardless of user existence; token generated and stored; rate limit middleware covered.
      - AC2 (reset-password): token lookup, used/expired checks; bcrypt hashing; transactional update of token and password.
      - AC3 (logout everywhere): calls SessionService.revokeAllUserSessions and route clears cookie.
      - AC4 (security/validation): zod validators, generic error messages, rate limiting.
      - AC5 (tests): happy path and key error paths implemented in routes/services specs.
    - Test artifacts reviewed:
      - backend/src/__tests__/routes/auth.spec.ts — Auth routes
      - backend/src/__tests__/services/auth.spec.ts — Auth services
      - backend/src/__tests__/services/session.spec.ts — Sessions
      - backend/src/__tests__/middlewares.spec.ts — Middleware
  NFRs:
    - Security: PASS (no leakage of account/token validity; rate limiting present)
    - Reliability: PASS (errors handled, transactions used)
    - Maintainability: PASS (clear separation of concerns; mocks provided)
    - Performance: PASS (token ops and session TTLs reasonable)
  Recommendations:
    - Consider adding a negative test for KV.put failure resilience in SessionService.create (non-blocking).
    - Add a test asserting cookie deletion on reset-password route (already covered for logout paths).
test-specs:
  specs: []
  artifacts: []
risk-mitigation:
  primary-risk: ""
  mitigation-strategies: []
  rollback-plan: ""
