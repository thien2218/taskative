datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator kysely {
  provider  = "prisma-kysely"
  output    = "./"
  fileName  = "types.ts"
  camelCase = true
}

// IMPORTANT: Table models must map to a plural, snake_case table name.
// IMPORTANT: All model fields must be snake_case.

model User {
  id                    String               @id
  email                 String               @unique
  password_hash         String
  first_name            String?
  last_name             String?
  username              String?              @unique
  profile_image_url     String?
  groups                Group[]
  tasks                 Task[]
  reminders             Reminder[]
  sessions              Session[]
  password_reset_tokens PasswordResetToken[]
  created_at            DateTime             @default(now())
  updated_at            DateTime             @updatedAt

  @@map("users")
}

model Session {
  id         String    @id
  user_id    String
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  status     String    @default("active")
  created_at DateTime  @default(now())
  expires_at DateTime
  revoked_at DateTime?

  @@index([user_id])
  @@index([expires_at])
  @@map("sessions")
}

model Group {
  id         String   @id
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  name       String
  color      String?
  tasks      Task[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("groups")
}

model Task {
  id              String     @id
  user_id         String
  user            User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  group_id        String?
  group           Group?     @relation(fields: [group_id], references: [id], onDelete: SetNull)
  title           String
  note            String?
  priority        Int?
  effort          Int?
  deadline        DateTime?
  repeat_interval String?
  remind_at       DateTime?
  status          String     @default("pending")
  subtasks        Subtask[]
  reminders       Reminder[]
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt

  @@index([user_id, status, deadline])
  @@index([user_id, priority, deadline])
  @@index([title])
  @@map("tasks")
}

model Subtask {
  id         String   @id
  task_id    String
  task       Task     @relation(fields: [task_id], references: [id], onDelete: Cascade)
  title      String
  status     String   @default("pending")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("subtasks")
}

model Reminder {
  id              String    @id
  task_id         String
  task            Task      @relation(fields: [task_id], references: [id], onDelete: Cascade)
  user_id         String
  user            User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  remind_at       DateTime
  repeat_interval String?
  last_sent_at    DateTime?
  status          String    @default("scheduled")
  created_at      DateTime  @default(now())

  @@index([user_id, remind_at])
  @@map("reminders")
}

model PasswordResetToken {
  id         String    @id
  user_id    String
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  token      String    @unique
  expires_at DateTime
  used_at    DateTime?
  created_at DateTime  @default(now())

  @@index([token])
  @@index([user_id])
  @@map("password_reset_tokens")
}
